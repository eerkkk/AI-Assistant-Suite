import { z } from "zod";
import { createTRPCRouter, publicProcedure } from "@/server/api/trpc";
import { PromptTemplate } from "langchain/prompts";
import {
  OutputFixingParser,
  StructuredOutputParser,
} from "langchain/output_parsers";
import summariseLLMQueryService from "@/services/api-service/sumarise-llm-query-service";
import commonApiService from "@/services/api-service/common-api-service";

// We can use zod to define a schema for the output using the `fromZodSchema` method of `StructuredOutputParser`.
const parser = StructuredOutputParser.fromZodSchema(
  z.object({
    coverLetter: z.string().describe("cover letter generated by the model"),
  })
);

const formatInstructions = parser.getFormatInstructions();

const prompt = new PromptTemplate({
  template: `

  You are an expert cover letter generator. You have a summarised resume and a summarised job description. You need to generate a cover letter that is {characterCount} characters long.

  ## Summarised Resume

  {resumeSummary}

  ## Summarised Job Description

  {jobDescriptionSummary}


  {format_instructions}
`,
  inputVariables: ["resumeSummary", "jobDescriptionSummary", "characterCount"],
  partialVariables: { format_instructions: formatInstructions },
});

const escapeDoubleQuotes = (jsonString: string): string => {
  try {
    // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment
    const jsonObject: { coverLetter?: string } = JSON.parse(jsonString);
    if (jsonObject.coverLetter) {
      jsonObject.coverLetter = jsonObject.coverLetter.replace(/"/g, '\\"');
      jsonObject.coverLetter.replace(/\n/g, "\\n");
      jsonObject.coverLetter
        .replace(/\\/g, "\\\\")
        .replace(/\n/g, "\\n")
        .replace(/"/g, '\\"');

      return JSON.stringify(jsonObject);
    } else {
      return jsonString; // If "summary" key is not present, return the original JSON string as is.
    }
  } catch (error) {
    // If there's an error parsing the JSON, return the original JSON string as is.
    return jsonString;
  }
};
export const coverLetter = createTRPCRouter({
  prompt: publicProcedure
    .input(
      z.object({
        resumeText: z.string(),
        jobDescription: z.string(),
        characterCount: z.number(),
      })
    )
    .mutation(async ({ input }) => {
      const { resumeText, jobDescription, characterCount } = input;

      const resumeSummaryParams = {
        textToSummarise: resumeText,
        characterCount: 1000,
      };
      const jobDescriptionSummaryParams = {
        textToSummarise: jobDescription,
        characterCount: 1000,
      };
      const resumeSummary = await summariseLLMQueryService.generateSummary(
        resumeSummaryParams
      );
      const jobDescriptionSummary =
        await summariseLLMQueryService.generateSummary(
          jobDescriptionSummaryParams
        );

      const model = commonApiService.generateModel();

      const inputParams = {
        resumeSummary: resumeSummary.response,
        jobDescriptionSummary: jobDescriptionSummary.response,
        characterCount: characterCount,
      };
      const llmInput = await commonApiService.generateFormattedLLMInput(
        prompt,
        inputParams
      );

      const llmResponse = (await model.call(llmInput)).trim();

      const escapedJsonObject = escapeDoubleQuotes(llmResponse);

      let coverLetter = "";
      try {
        const response = await parser.parse(escapedJsonObject);
        coverLetter = response.coverLetter;
      } catch (err) {
        const fixingParser = OutputFixingParser.fromLLM(model, parser);
        const fixedResponse = await fixingParser.parse(llmResponse);
        coverLetter = fixedResponse.coverLetter;
      }

      return { response: coverLetter };
    }),
});
